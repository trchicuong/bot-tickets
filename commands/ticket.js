const { SlashCommandBuilder, PermissionFlagsBits, ActionRowBuilder, StringSelectMenuBuilder, StringSelectMenuOptionBuilder, EmbedBuilder, ButtonBuilder, ButtonStyle, ChannelType } = require('discord.js');
const fs = require('fs');
const path = require('path');

const transcriptsPath = path.join(__dirname, '../transcripts.json');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('ticket')
        .setDescription('L·ªánh qu·∫£n l√Ω h·ªá th·ªëng ticket.')
        .addSubcommand(subcommand =>
            subcommand
                .setName('new')
                .setDescription('M·ªü m·ªôt ticket h·ªó tr·ª£ m·ªõi.'))
        .addSubcommand(subcommand =>
            subcommand
                .setName('reopen')
                .setDescription('M·ªü l·∫°i m·ªôt ticket ƒë√£ ƒë√≥ng.')
                .addStringOption(option =>
                    option.setName('ticket_id')
                        .setDescription('ID c·ªßa ticket mu·ªën m·ªü l·∫°i.')
                        .setRequired(true))),
    async execute(interaction) {
        const subcommand = interaction.options.getSubcommand();
        const { client, guild, user } = interaction;

        // X·ª≠ l√Ω l·ªánh: /ticket new
        if (subcommand === 'new') {
            const existingTicket = guild.channels.cache.find(c =>
                c.topic?.includes(`ID: ${user.id}`)
            );

            if (existingTicket) {
                return interaction.reply({ content: `B·∫°n ƒë√£ c√≥ m·ªôt ticket ƒëang m·ªü t·∫°i ${existingTicket}!`, ephemeral: true });
            }

            const selectMenu = new StringSelectMenuBuilder()
                .setCustomId('select_topic')
                .setPlaceholder('Ch·ªçn m·ªôt ch·ªß ƒë·ªÅ...')
                .addOptions(
                    new StringSelectMenuOptionBuilder()
                        .setLabel('H·ªó tr·ª£ chung')
                        .setDescription('Y√™u c·∫ßu h·ªó tr·ª£ v·ªÅ c√°c v·∫•n ƒë·ªÅ chung.')
                        .setValue('h·ªó tr·ª£ chung'),
                    new StringSelectMenuOptionBuilder()
                        .setLabel('G√≥p √Ω/ƒê·ªÅ xu·∫•t')
                        .setDescription('ƒê√≥ng g√≥p √Ω ki·∫øn ho·∫∑c ƒë·ªÅ xu·∫•t t√≠nh nƒÉng m·ªõi.')
                        .setValue('g√≥p √Ω/ƒë·ªÅ xu·∫•t'),
                    new StringSelectMenuOptionBuilder()
                        .setLabel('B√°o c√°o l·ªói')
                        .setDescription('B√°o c√°o l·ªói ho·∫∑c v·∫•n ƒë·ªÅ k·ªπ thu·∫≠t.')
                        .setValue('b√°o c√°o l·ªói'),
                    new StringSelectMenuOptionBuilder()
                        .setLabel('Kh√°c')
                        .setDescription('Ch·ªçn t√πy ch·ªçn n√†y n·∫øu kh√¥ng c√≥ ch·ªß ƒë·ªÅ ph√π h·ª£p.')
                        .setValue('kh√°c')
                );

            const row = new ActionRowBuilder().addComponents(selectMenu);

            await interaction.reply({
                content: 'Vui l√≤ng ch·ªçn m·ªôt ch·ªß ƒë·ªÅ cho ticket c·ªßa b·∫°n:',
                components: [row],
                ephemeral: true,
            });
            return;
        }
        // X·ª≠ l√Ω l·ªánh: /ticket reopen
        else if (subcommand === 'reopen') {
            if (!interaction.member.permissions.has(PermissionFlagsBits.ManageChannels)) {
                return interaction.reply({ content: 'B·∫°n kh√¥ng c√≥ quy·ªÅn ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.', ephemeral: true });
            }
            
            await interaction.deferReply({ ephemeral: true });
            const ticketId = interaction.options.getString('ticket_id');

            let transcripts = {};
            try {
                transcripts = JSON.parse(fs.readFileSync(transcriptsPath, 'utf8'));
            } catch (e) {
                transcripts = {};
            }

            const transcriptData = transcripts[ticketId];
            if (!transcriptData) {
                return interaction.editReply({ content: 'Kh√¥ng t√¨m th·∫•y ticket ƒë√£ ƒë√≥ng v·ªõi ID n√†y.', ephemeral: true });
            }

            const existingTicket = guild.channels.cache.find(c =>
                c.topic?.includes(`ID: ${transcriptData.user}`)
            );
            if (existingTicket) {
                 return interaction.editReply({ content: `Ticket c·ªßa ng∆∞·ªùi d√πng n√†y ƒëang m·ªü t·∫°i ${existingTicket}!`, ephemeral: true });
            }

            try {
                const user = await client.users.fetch(transcriptData.user);
                const ticketTopic = `ƒê∆∞·ª£c m·ªü l·∫°i b·ªüi: ${interaction.user.tag} - Ng∆∞·ªùi t·∫°o c≈©: ${user.tag} - ID: ${user.id}`;

                const ticketChannel = await guild.channels.create({
                    name: `ticket-reopen-${ticketId}`,
                    type: ChannelType.GuildText,
                    topic: ticketTopic,
                    permissionOverwrites: [
                        {
                            id: guild.id,
                            deny: [PermissionFlagsBits.ViewChannel],
                        },
                        {
                            id: transcriptData.user,
                            allow: [PermissionFlagsBits.ViewChannel, PermissionFlagsBits.SendMessages],
                        },
                        {
                            id: client.user.id,
                            allow: [PermissionFlagsBits.ViewChannel, PermissionFlagsBits.SendMessages, PermissionFlagsBits.ManageChannels],
                        }
                    ],
                });

                await ticketChannel.setPosition(0);

                const reopenEmbed = new EmbedBuilder()
                    .setColor('#2ecc71') // ƒê√£ ƒë·ªïi sang m√†u xanh l√°
                    .setTitle('Ticket ƒê√£ ƒê∆∞·ª£c M·ªü L·∫°i')
                    .setDescription(`Ticket n√†y ƒë∆∞·ª£c m·ªü l·∫°i b·ªüi ${interaction.user.tag}.\n\nƒê√¢y l√† transcript c·ªßa cu·ªôc tr√≤ chuy·ªán c≈©:`)
                    .addFields(
                        { name: 'Ng∆∞·ªùi d√πng', value: user.tag, inline: true },
                        { name: 'Th·ªùi gian ƒë√≥ng c≈©', value: new Date(transcriptData.timestamp).toLocaleString('vi-VN'), inline: true },
                        { name: 'ID Ticket', value: ticketId, inline: false }
                    )
                    .setTimestamp();

                const closeButton = new ButtonBuilder()
                    .setCustomId('close_ticket')
                    .setLabel('ƒê√≥ng Ticket')
                    .setStyle(ButtonStyle.Danger)
                    .setEmoji('üîí');

                const row = new ActionRowBuilder().addComponents(closeButton);

                await ticketChannel.send({ embeds: [reopenEmbed], components: [row] });
                await ticketChannel.send({ content: `[B·∫£n ghi c≈©](${transcriptData.url})` });

                delete transcripts[ticketId];
                fs.writeFileSync(transcriptsPath, JSON.stringify(transcripts, null, 4));

                return interaction.editReply({ content: `Ticket \`#${ticketId}\` ƒë√£ ƒë∆∞·ª£c m·ªü l·∫°i th√†nh c√¥ng t·∫°i ${ticketChannel}!`, ephemeral: true });

            } catch (error) {
                console.error(error);
                return interaction.editReply({ content: 'C√≥ l·ªói x·∫£y ra khi m·ªü l·∫°i ticket.', ephemeral: true });
            }
        }
    },
};