const { Events, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, ChannelType, PermissionFlagsBits, AttachmentBuilder, StringSelectMenuBuilder, StringSelectMenuOptionBuilder, ModalBuilder, TextInputBuilder, TextInputStyle } = require('discord.js');
const fs = require('fs');
const path = require('path');
const { logChannelId } = require('../config.json');

const transcriptsPath = path.join(__dirname, '../transcripts.json');

function saveTranscript(ticketId, transcript) {
    let data = {};
    try {
        data = JSON.parse(fs.readFileSync(transcriptsPath, 'utf8'));
    } catch (e) {
        data = {};
    }
    data[ticketId] = transcript;
    fs.writeFileSync(transcriptsPath, JSON.stringify(data, null, 4));
}

module.exports = {
    name: Events.InteractionCreate,
    async execute(interaction) {
        if (interaction.isCommand()) {
            return;
        }

        const { channel, customId, user, client, guild } = interaction;

        if (customId === 'create_ticket') {
            const existingTicket = guild.channels.cache.find(c =>
                c.topic?.includes(`ID: ${user.id}`)
            );

            if (existingTicket) {
                return interaction.reply({ content: `B·∫°n ƒë√£ c√≥ m·ªôt ticket ƒëang m·ªü t·∫°i ${existingTicket}!`, ephemeral: true });
            }

            const selectMenu = new StringSelectMenuBuilder()
                .setCustomId('select_topic')
                .setPlaceholder('Ch·ªçn m·ªôt ch·ªß ƒë·ªÅ...')
                .addOptions(
                    new StringSelectMenuOptionBuilder()
                        .setLabel('H·ªó tr·ª£ chung')
                        .setDescription('Y√™u c·∫ßu h·ªó tr·ª£ v·ªÅ c√°c v·∫•n ƒë·ªÅ chung.')
                        .setValue('h·ªó tr·ª£ chung'),
                    new StringSelectMenuOptionBuilder()
                        .setLabel('G√≥p √Ω/ƒê·ªÅ xu·∫•t')
                        .setDescription('ƒê√≥ng g√≥p √Ω ki·∫øn ho·∫∑c ƒë·ªÅ xu·∫•t t√≠nh nƒÉng m·ªõi.')
                        .setValue('g√≥p √Ω/ƒë·ªÅ xu·∫•t'),
                    new StringSelectMenuOptionBuilder()
                        .setLabel('B√°o c√°o l·ªói')
                        .setDescription('B√°o c√°o l·ªói ho·∫∑c v·∫•n ƒë·ªÅ k·ªπ thu·∫≠t.')
                        .setValue('b√°o c√°o l·ªói'),
                    new StringSelectMenuOptionBuilder()
                        .setLabel('Kh√°c')
                        .setDescription('Ch·ªçn t√πy ch·ªçn n√†y n·∫øu kh√¥ng c√≥ ch·ªß ƒë·ªÅ ph√π h·ª£p.')
                        .setValue('kh√°c')
                );

            const row = new ActionRowBuilder().addComponents(selectMenu);

            await interaction.reply({
                content: 'Vui l√≤ng ch·ªçn m·ªôt ch·ªß ƒë·ªÅ cho ticket c·ªßa b·∫°n:',
                components: [row],
                ephemeral: true,
            });
            return;
        }
        
        if (customId === 'select_topic') {
            const selectedTopic = interaction.values[0];

            if (selectedTopic === 'kh√°c') {
                const modal = new ModalBuilder()
                    .setCustomId('custom_topic_modal')
                    .setTitle('Nh·∫≠p ch·ªß ƒë·ªÅ t√πy ch·ªânh');
                
                const topicInput = new TextInputBuilder()
                    .setCustomId('custom_topic_input')
                    .setLabel('Ch·ªß ƒë·ªÅ')
                    .setStyle(TextInputStyle.Short)
                    .setMinLength(1)
                    .setMaxLength(50)
                    .setRequired(true);

                const firstActionRow = new ActionRowBuilder().addComponents(topicInput);
                modal.addComponents(firstActionRow);

                await interaction.showModal(modal);
                return;
            }

            await interaction.deferReply({ ephemeral: true });

            try {
                const now = new Date();
                const ticketTopic = `T·∫°o b·ªüi: ${user.tag} - Ch·ªß ƒë·ªÅ: ${selectedTopic} - ID: ${user.id}`;
                const ticketChannel = await guild.channels.create({
                    name: `ticket-${user.username}-${now.getTime()}`,
                    type: ChannelType.GuildText,
                    topic: ticketTopic,
                    permissionOverwrites: [
                        {
                            id: guild.id,
                            deny: [PermissionFlagsBits.ViewChannel],
                        },
                        {
                            id: user.id,
                            allow: [PermissionFlagsBits.ViewChannel, PermissionFlagsBits.SendMessages],
                        },
                        {
                            id: client.user.id,
                            allow: [PermissionFlagsBits.ViewChannel, PermissionFlagsBits.SendMessages, PermissionFlagsBits.ManageChannels],
                        }
                    ],
                });

                await ticketChannel.setPosition(0);

                const ticketEmbed = new EmbedBuilder()
                    .setColor('#2ecc71')
                    .setTitle('üé´ Ticket H·ªó Tr·ª£ M·ªõi')
                    .setDescription(`Ch√†o m·ª´ng <@${user.id}>, b·∫°n ƒë√£ t·∫°o ticket th√†nh c√¥ng! ƒê·ªôi ng≈© h·ªó tr·ª£ s·∫Ω c√≥ m·∫∑t s·ªõm nh·∫•t c√≥ th·ªÉ.\n\n**Ch·ªß ƒë·ªÅ**: ${selectedTopic}`)
                    .setTimestamp()
                    .setFooter({ text: `H·ªá th·ªëng Ticket | ID ng∆∞·ªùi d√πng: ${user.id}` });
                
                const closeButton = new ButtonBuilder()
                    .setCustomId('close_ticket')
                    .setLabel('ƒê√≥ng Ticket')
                    .setStyle(ButtonStyle.Danger)
                    .setEmoji('üîí');

                const row = new ActionRowBuilder().addComponents(closeButton);

                await ticketChannel.send({ content: `<@${user.id}>`, embeds: [ticketEmbed], components: [row] });

                return interaction.editReply({ content: `Ticket c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o t·∫°i ${ticketChannel} v·ªõi ch·ªß ƒë·ªÅ: **${selectedTopic}**!`, ephemeral: true });

            } catch (error) {
                console.error(error);
                return interaction.editReply({ content: 'C√≥ l·ªói x·∫£y ra khi t·∫°o ticket. Vui l√≤ng ki·ªÉm tra quy·ªÅn c·ªßa bot.', ephemeral: true });
            }
        }
        
        if (interaction.isModalSubmit() && interaction.customId === 'custom_topic_modal') {
            await interaction.deferReply({ ephemeral: true });
            const customTopic = interaction.fields.getTextInputValue('custom_topic_input');
            
            try {
                const now = new Date();
                const ticketTopic = `T·∫°o b·ªüi: ${user.tag} - Ch·ªß ƒë·ªÅ: ${customTopic} - ID: ${user.id}`;
                const ticketChannel = await guild.channels.create({
                    name: `ticket-${user.username}-${now.getTime()}`,
                    type: ChannelType.GuildText,
                    topic: ticketTopic,
                    permissionOverwrites: [
                        {
                            id: guild.id,
                            deny: [PermissionFlagsBits.ViewChannel],
                        },
                        {
                            id: user.id,
                            allow: [PermissionFlagsBits.ViewChannel, PermissionFlagsBits.SendMessages],
                        },
                        {
                            id: client.user.id,
                            allow: [PermissionFlagsBits.ViewChannel, PermissionFlagsBits.SendMessages, PermissionFlagsBits.ManageChannels],
                        }
                    ],
                });
                
                await ticketChannel.setPosition(0);
                
                const ticketEmbed = new EmbedBuilder()
                    .setColor('#2ecc71')
                    .setTitle('üé´ Ticket H·ªó Tr·ª£ M·ªõi')
                    .setDescription(`Ch√†o m·ª´ng <@${user.id}>, b·∫°n ƒë√£ t·∫°o ticket th√†nh c√¥ng! ƒê·ªôi ng≈© h·ªó tr·ª£ s·∫Ω c√≥ m·∫∑t s·ªõm nh·∫•t c√≥ th·ªÉ.\n\n**Ch·ªß ƒë·ªÅ**: ${customTopic}`)
                    .setTimestamp()
                    .setFooter({ text: `H·ªá th·ªëng Ticket | ID ng∆∞·ªùi d√πng: ${user.id}` });

                const closeButton = new ButtonBuilder()
                    .setCustomId('close_ticket')
                    .setLabel('ƒê√≥ng Ticket')
                    .setStyle(ButtonStyle.Danger)
                    .setEmoji('üîí');

                const row = new ActionRowBuilder().addComponents(closeButton);

                await ticketChannel.send({ content: `<@${user.id}>`, embeds: [ticketEmbed], components: [row] });
                
                return interaction.editReply({ content: `Ticket c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o t·∫°i ${ticketChannel} v·ªõi ch·ªß ƒë·ªÅ: **${customTopic}**!`, ephemeral: true });

            } catch (error) {
                console.error(error);
                return interaction.editReply({ content: 'C√≥ l·ªói x·∫£y ra khi t·∫°o ticket. Vui l√≤ng ki·ªÉm tra quy·ªÅn c·ªßa bot.', ephemeral: true });
            }
        }

        if (interaction.isButton()) {
            if (customId === 'close_ticket') {
                if (!interaction.member.permissions.has(PermissionFlagsBits.ManageChannels)) {
                    return interaction.reply({ content: 'B·∫°n kh√¥ng c√≥ quy·ªÅn ƒë·ªÉ ƒë√≥ng ticket n√†y.', ephemeral: true });
                }

                const confirmEmbed = new EmbedBuilder()
                    .setColor('#e74c3c')
                    .setTitle('‚ö†Ô∏è X√°c nh·∫≠n ƒê√≥ng Ticket')
                    .setDescription('H√†nh ƒë·ªông n√†y s·∫Ω ƒë√≥ng v√† l∆∞u l·∫°i b·∫£n ghi c·ªßa ticket. B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øp t·ª•c kh√¥ng?');

                const confirmButton = new ButtonBuilder()
                    .setCustomId('confirm_close')
                    .setLabel('X√°c nh·∫≠n ƒê√≥ng')
                    .setStyle(ButtonStyle.Success);

                const cancelButton = new ButtonBuilder()
                    .setCustomId('cancel_close')
                    .setLabel('H·ªßy')
                    .setStyle(ButtonStyle.Secondary);

                const row = new ActionRowBuilder().addComponents(confirmButton, cancelButton);

                await interaction.reply({ embeds: [confirmEmbed], components: [row], ephemeral: true });
            }
            
            if (customId === 'confirm_close') {
                await interaction.deferReply({ ephemeral: true });

                const messages = await channel.messages.fetch({ limit: 100 });
                const userIdMatch = channel.topic?.match(/ID: (\d+)/);
                const userId = userIdMatch ? userIdMatch[1] : channel.topic;
                const userTag = guild.members.cache.get(userId)?.user.tag || 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng';
                
                const topicMatch = channel.topic?.match(/Ch·ªß ƒë·ªÅ: (.+) - ID:/);
                const ticketTopic = topicMatch ? topicMatch[1] : 'Kh√¥ng r√µ';

                const creationTime = new Date(messages.last()?.createdTimestamp).toLocaleString('vi-VN');
                const closeTime = new Date().toLocaleString('vi-VN');

                let transcriptHeader = 
                    `--- Transcript Ticket ---\n` +
                    `ID Ticket: #${channel.name}\n` +
                    `Ch·ªß ƒë·ªÅ: ${ticketTopic}\n` +
                    `Ng∆∞·ªùi t·∫°o: ${userTag}\n` +
                    `Th·ªùi gian t·∫°o: ${creationTime}\n` +
                    `Th·ªùi gian ƒë√≥ng: ${closeTime}\n` +
                    `Ng∆∞·ªùi ƒë√≥ng: ${user.tag}\n` +
                    `--- L·ªãch s·ª≠ chat ---\n\n`;

                const transcriptContent = messages.reverse().map(msg => 
                    `[${new Date(msg.createdTimestamp).toLocaleString('vi-VN')}] ${msg.author.tag}: ${msg.content}`
                ).join('\n');

                const fullTranscript = transcriptHeader + transcriptContent;

                const fileName = `${channel.name}.txt`;
                const transcriptAttachment = new AttachmentBuilder(Buffer.from(fullTranscript), { name: fileName });

                const logChannel = guild.channels.cache.get(logChannelId);

                if (logChannel) {
                    const logMessage = await logChannel.send({ content: `Ticket t·ª´ <@${userId}> ƒë√£ ƒë∆∞·ª£c ƒë√≥ng.`, files: [transcriptAttachment] });
                    const transcriptUrl = logMessage.attachments.first()?.url;
                    if (transcriptUrl) {
                        saveTranscript(channel.name.replace('ticket-reopen-', '').replace('ticket-', ''), {
                            user: userId,
                            url: transcriptUrl,
                            timestamp: Date.now()
                        });
                    }
                }

                const closeEmbed = new EmbedBuilder()
                    .setColor('#e74c3c')
                    .setTitle('üîí Ticket ƒê√£ ƒê√≥ng')
                    .setDescription(`Ticket n√†y ƒë√£ ƒë∆∞·ª£c ƒë√≥ng b·ªüi <@${user.id}>. K√™nh s·∫Ω t·ª± ƒë·ªông x√≥a sau 3 gi√¢y.`)
                    .setTimestamp()
                    .setFooter({ text: `H·ªá th·ªëng Ticket | ID ticket: #${channel.name}` });

                await channel.send({ embeds: [closeEmbed] });

                setTimeout(() => {
                    channel.delete().catch(console.error);
                }, 3000); // ƒê√£ ƒë·ªïi th·ªùi gian th√†nh 3 gi√¢y
            }

            if (customId === 'cancel_close') {
                await interaction.reply({ content: 'ƒê√£ h·ªßy ƒë√≥ng ticket.', ephemeral: true });
            }
        }
    },
};